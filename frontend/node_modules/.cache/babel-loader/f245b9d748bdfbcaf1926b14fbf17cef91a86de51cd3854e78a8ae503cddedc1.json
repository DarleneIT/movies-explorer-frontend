{"ast":null,"code":"class ApiMain {\n  constructor(options) {\n    this._url = options.url;\n  }\n  _checkResponse(res) {\n    if (res.ok) {\n      return Promise.resolve(res.json());\n    }\n    return Promise.reject(`Ошибка ${res.status}`);\n  }\n\n  //Регистрация и авторизация\n  _request(url, options) {\n    return fetch(`${this._url}${url}`, options).then(this._checkResponse);\n  }\n  registration({\n    name,\n    email,\n    password\n  }) {\n    return this._request(\"/signup\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name: name,\n        email: email,\n        password: password\n      })\n    });\n  }\n  authorization({\n    email,\n    password\n  }) {\n    return this._request(\"/signin\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email: email,\n        password: password\n      })\n    });\n  }\n\n  //Регистрация и авторизация\n  _request(path, method, data) {\n    let body = data;\n    if (method === \"POST\" && data) {\n      body = JSON.stringify(data);\n    }\n    return fetch(this._url + path, {\n      method,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body\n    }).then(this._checkResponse);\n  }\n  registration({\n    name,\n    email,\n    password\n  }) {\n    return this._request(`/signup`, \"POST\", {\n      name,\n      email,\n      password\n    });\n  }\n  authorization({\n    email,\n    password\n  }) {\n    return this._request(`/signin`, \"POST\", {\n      email,\n      password\n    });\n  }\n\n  //Получение данных\n  getUserData(token) {\n    return this._request(\"/users/me\", {\n      headers: {\n        authorization: `Bearer ${token}`\n      }\n    });\n  }\n  async getUserInfo() {\n    const response = await fetch(`${this._url}/users/me`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Bearer ${localStorage.getItem(\"token\")}`\n      }\n    });\n    return this._checkResponse(response);\n  }\n\n  //Редактирование данных пользователя\n  async setUserInfo(data) {\n    const response = await fetch(`${this._url}/users/me`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Bearer ${localStorage.getItem(\"token\")}`\n      },\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    });\n    return this._checkResponse(response);\n  }\n\n  //\n\n  getMovies(token) {\n    return this._request(\"/movies\", {\n      headers: {\n        authorization: `Bearer ${token}`\n      }\n    });\n  }\n  addMovie(data, token) {\n    return this._request(\"/movies\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        country: data.country,\n        director: data.director,\n        duration: data.duration,\n        description: data.description,\n        year: data.year,\n        image: `https://api.nomoreparties.co${data.image.url}`,\n        trailerLink: data.trailerLink,\n        thumbnail: `https://api.nomoreparties.co${data.image.formats.thumbnail.url}`,\n        movieId: data.id,\n        nameRU: data.nameRU,\n        nameEN: data.nameEN\n      })\n    });\n  }\n  deleteMovie(cardId, token) {\n    return this._request(`/movies/${cardId}`, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  }\n}\nexport const apiMain = new ApiMain({\n  url: \"http://localhost:3000\"\n  //url: \"https://movies.nomoredomainsrocks.ru\",\n});","map":{"version":3,"names":["ApiMain","constructor","options","_url","url","_checkResponse","res","ok","Promise","resolve","json","reject","status","_request","fetch","then","registration","name","email","password","method","headers","body","JSON","stringify","authorization","path","data","getUserData","token","getUserInfo","response","localStorage","getItem","setUserInfo","about","getMovies","addMovie","Authorization","country","director","duration","description","year","image","trailerLink","thumbnail","formats","movieId","id","nameRU","nameEN","deleteMovie","cardId","apiMain"],"sources":["/Users/darlene/Desktop/dev/diploma/movies-explorer-frontend/frontend/src/utils/MainApi.js"],"sourcesContent":["class ApiMain {\n  constructor(options) {\n    this._url = options.url;\n  }\n\n  _checkResponse(res) {\n    if (res.ok) {\n      return Promise.resolve(res.json());\n    }\n    return Promise.reject(`Ошибка ${res.status}`);\n  }\n\n  //Регистрация и авторизация\n  _request(url, options) {\n    return fetch(`${this._url}${url}`, options)\n    .then(this._checkResponse);\n  }\n\n  registration({ name, email, password }) {\n    return this._request(\"/signup\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        name: name,\n        email: email,\n        password: password,\n      }),\n    });\n  }\n\n  authorization({ email, password }) {\n    return this._request(\"/signin\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        email: email,\n        password: password,\n      }),\n    });\n  }\n\n   //Регистрация и авторизация\n   _request(path, method, data) {\n    let body = data;\n    if (method === \"POST\" && data) {\n      body = JSON.stringify(data);\n    }\n    return fetch(this._url + path, {\n      method,\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body,\n    }).then(this._checkResponse);\n  }\n\n  registration({ name, email, password }) {\n    return this._request(`/signup`, \"POST\", { name, email, password });\n  }\n\n  authorization({ email, password }) {\n    return this._request(`/signin`, \"POST\", { email, password });\n  }\n\n\n\n  \n  //Получение данных\n  getUserData(token) {\n    return this._request(\"/users/me\", {\n      headers: {\n        authorization: `Bearer ${token}`,\n      },\n    });\n  }\n\n  async getUserInfo() {\n    const response = await fetch(`${this._url}/users/me`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      },\n    });\n    return this._checkResponse(response);\n  }\n\n  //Редактирование данных пользователя\n  async setUserInfo(data) {\n    const response = await fetch(`${this._url}/users/me`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      },\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about,\n      }),\n    });\n    return this._checkResponse(response);\n  }\n\n  //\n\n  getMovies(token) {\n    return this._request(\"/movies\", {\n      headers: {\n        authorization: `Bearer ${token}`,\n      },\n    });\n  }\n\n  addMovie(data, token) {\n    return this._request(\"/movies\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n      body: JSON.stringify({\n        country: data.country,\n        director: data.director,\n        duration: data.duration,\n        description: data.description,\n        year: data.year,\n        image: `https://api.nomoreparties.co${data.image.url}`,\n        trailerLink: data.trailerLink,\n        thumbnail: `https://api.nomoreparties.co${data.image.formats.thumbnail.url}`,\n        movieId: data.id,\n        nameRU: data.nameRU,\n        nameEN: data.nameEN,\n      }),\n    });\n  }\n\n  deleteMovie(cardId, token) {\n    return this._request(`/movies/${cardId}`, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n  }\n}\n\nexport const apiMain = new ApiMain({\n  url: \"http://localhost:3000\",\n  //url: \"https://movies.nomoredomainsrocks.ru\",\n});\n"],"mappings":"AAAA,MAAMA,OAAO,CAAC;EACZC,WAAWA,CAACC,OAAO,EAAE;IACnB,IAAI,CAACC,IAAI,GAAGD,OAAO,CAACE,GAAG;EACzB;EAEAC,cAAcA,CAACC,GAAG,EAAE;IAClB,IAAIA,GAAG,CAACC,EAAE,EAAE;MACV,OAAOC,OAAO,CAACC,OAAO,CAACH,GAAG,CAACI,IAAI,CAAC,CAAC,CAAC;IACpC;IACA,OAAOF,OAAO,CAACG,MAAM,CAAE,UAASL,GAAG,CAACM,MAAO,EAAC,CAAC;EAC/C;;EAEA;EACAC,QAAQA,CAACT,GAAG,EAAEF,OAAO,EAAE;IACrB,OAAOY,KAAK,CAAE,GAAE,IAAI,CAACX,IAAK,GAAEC,GAAI,EAAC,EAAEF,OAAO,CAAC,CAC1Ca,IAAI,CAAC,IAAI,CAACV,cAAc,CAAC;EAC5B;EAEAW,YAAYA,CAAC;IAAEC,IAAI;IAAEC,KAAK;IAAEC;EAAS,CAAC,EAAE;IACtC,OAAO,IAAI,CAACN,QAAQ,CAAC,SAAS,EAAE;MAC9BO,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBP,IAAI,EAAEA,IAAI;QACVC,KAAK,EAAEA,KAAK;QACZC,QAAQ,EAAEA;MACZ,CAAC;IACH,CAAC,CAAC;EACJ;EAEAM,aAAaA,CAAC;IAAEP,KAAK;IAAEC;EAAS,CAAC,EAAE;IACjC,OAAO,IAAI,CAACN,QAAQ,CAAC,SAAS,EAAE;MAC9BO,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBN,KAAK,EAAEA,KAAK;QACZC,QAAQ,EAAEA;MACZ,CAAC;IACH,CAAC,CAAC;EACJ;;EAEC;EACAN,QAAQA,CAACa,IAAI,EAAEN,MAAM,EAAEO,IAAI,EAAE;IAC5B,IAAIL,IAAI,GAAGK,IAAI;IACf,IAAIP,MAAM,KAAK,MAAM,IAAIO,IAAI,EAAE;MAC7BL,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACG,IAAI,CAAC;IAC7B;IACA,OAAOb,KAAK,CAAC,IAAI,CAACX,IAAI,GAAGuB,IAAI,EAAE;MAC7BN,MAAM;MACNC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC;IACF,CAAC,CAAC,CAACP,IAAI,CAAC,IAAI,CAACV,cAAc,CAAC;EAC9B;EAEAW,YAAYA,CAAC;IAAEC,IAAI;IAAEC,KAAK;IAAEC;EAAS,CAAC,EAAE;IACtC,OAAO,IAAI,CAACN,QAAQ,CAAE,SAAQ,EAAE,MAAM,EAAE;MAAEI,IAAI;MAAEC,KAAK;MAAEC;IAAS,CAAC,CAAC;EACpE;EAEAM,aAAaA,CAAC;IAAEP,KAAK;IAAEC;EAAS,CAAC,EAAE;IACjC,OAAO,IAAI,CAACN,QAAQ,CAAE,SAAQ,EAAE,MAAM,EAAE;MAAEK,KAAK;MAAEC;IAAS,CAAC,CAAC;EAC9D;;EAKA;EACAS,WAAWA,CAACC,KAAK,EAAE;IACjB,OAAO,IAAI,CAAChB,QAAQ,CAAC,WAAW,EAAE;MAChCQ,OAAO,EAAE;QACPI,aAAa,EAAG,UAASI,KAAM;MACjC;IACF,CAAC,CAAC;EACJ;EAEA,MAAMC,WAAWA,CAAA,EAAG;IAClB,MAAMC,QAAQ,GAAG,MAAMjB,KAAK,CAAE,GAAE,IAAI,CAACX,IAAK,WAAU,EAAE;MACpDiB,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCI,aAAa,EAAG,UAASO,YAAY,CAACC,OAAO,CAAC,OAAO,CAAE;MACzD;IACF,CAAC,CAAC;IACF,OAAO,IAAI,CAAC5B,cAAc,CAAC0B,QAAQ,CAAC;EACtC;;EAEA;EACA,MAAMG,WAAWA,CAACP,IAAI,EAAE;IACtB,MAAMI,QAAQ,GAAG,MAAMjB,KAAK,CAAE,GAAE,IAAI,CAACX,IAAK,WAAU,EAAE;MACpDiB,MAAM,EAAE,OAAO;MACfC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCI,aAAa,EAAG,UAASO,YAAY,CAACC,OAAO,CAAC,OAAO,CAAE;MACzD,CAAC;MACDX,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBP,IAAI,EAAEU,IAAI,CAACV,IAAI;QACfkB,KAAK,EAAER,IAAI,CAACQ;MACd,CAAC;IACH,CAAC,CAAC;IACF,OAAO,IAAI,CAAC9B,cAAc,CAAC0B,QAAQ,CAAC;EACtC;;EAEA;;EAEAK,SAASA,CAACP,KAAK,EAAE;IACf,OAAO,IAAI,CAAChB,QAAQ,CAAC,SAAS,EAAE;MAC9BQ,OAAO,EAAE;QACPI,aAAa,EAAG,UAASI,KAAM;MACjC;IACF,CAAC,CAAC;EACJ;EAEAQ,QAAQA,CAACV,IAAI,EAAEE,KAAK,EAAE;IACpB,OAAO,IAAI,CAAChB,QAAQ,CAAC,SAAS,EAAE;MAC9BO,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCiB,aAAa,EAAG,UAAST,KAAM;MACjC,CAAC;MACDP,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBe,OAAO,EAAEZ,IAAI,CAACY,OAAO;QACrBC,QAAQ,EAAEb,IAAI,CAACa,QAAQ;QACvBC,QAAQ,EAAEd,IAAI,CAACc,QAAQ;QACvBC,WAAW,EAAEf,IAAI,CAACe,WAAW;QAC7BC,IAAI,EAAEhB,IAAI,CAACgB,IAAI;QACfC,KAAK,EAAG,+BAA8BjB,IAAI,CAACiB,KAAK,CAACxC,GAAI,EAAC;QACtDyC,WAAW,EAAElB,IAAI,CAACkB,WAAW;QAC7BC,SAAS,EAAG,+BAA8BnB,IAAI,CAACiB,KAAK,CAACG,OAAO,CAACD,SAAS,CAAC1C,GAAI,EAAC;QAC5E4C,OAAO,EAAErB,IAAI,CAACsB,EAAE;QAChBC,MAAM,EAAEvB,IAAI,CAACuB,MAAM;QACnBC,MAAM,EAAExB,IAAI,CAACwB;MACf,CAAC;IACH,CAAC,CAAC;EACJ;EAEAC,WAAWA,CAACC,MAAM,EAAExB,KAAK,EAAE;IACzB,OAAO,IAAI,CAAChB,QAAQ,CAAE,WAAUwC,MAAO,EAAC,EAAE;MACxCjC,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAE;QACPiB,aAAa,EAAG,UAAST,KAAM;MACjC;IACF,CAAC,CAAC;EACJ;AACF;AAEA,OAAO,MAAMyB,OAAO,GAAG,IAAItD,OAAO,CAAC;EACjCI,GAAG,EAAE;EACL;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}