{"ast":null,"code":"class ApiMain {\n  constructor(options) {\n    this._url = options.url;\n  }\n  _checkResponse(res) {\n    if (res.ok) {\n      return Promise.resolve(res.json());\n    }\n    return Promise.reject(`Ошибка ${res.status}`);\n  }\n\n  //Регистрация и авторизация\n\n  _request(path, method, data) {\n    let body = data;\n    if (method === \"POST\" && data) {\n      body = JSON.stringify(data);\n    }\n    return fetch(this._url + path, {\n      method,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body\n    }).then(this._checkResponse);\n  }\n  registration(data) {\n    return this._request(`/signup`, \"POST\", data);\n  }\n  authorization(data) {\n    return this._request(`/signin`, \"POST\", data);\n  }\n\n  //Получение данных\n  getUserData(token) {\n    return this._request(\"/users/me\", {\n      headers: {\n        authorization: `Bearer ${token}`\n      }\n    });\n  }\n  async getUserInfo() {\n    const response = await fetch(`${this._url}/users/me`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Bearer ${localStorage.getItem(\"token\")}`\n      }\n    });\n    return this._checkResponse(response);\n  }\n\n  //Редактирование данных пользователя\n  async setUserInfo(data) {\n    const response = await fetch(`${this._url}/users/me`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Bearer ${localStorage.getItem(\"token\")}`\n      },\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    });\n    return this._checkResponse(response);\n  }\n\n  //\n\n  getMovies(token) {\n    return this._request(\"/movies\", {\n      headers: {\n        authorization: `Bearer ${token}`\n      }\n    });\n  }\n  addMovie(data, token) {\n    return this._request(\"/movies\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        country: data.country,\n        director: data.director,\n        duration: data.duration,\n        description: data.description,\n        year: data.year,\n        image: `https://api.nomoreparties.co${data.image.url}`,\n        trailerLink: data.trailerLink,\n        thumbnail: `https://api.nomoreparties.co${data.image.formats.thumbnail.url}`,\n        movieId: data.id,\n        nameRU: data.nameRU,\n        nameEN: data.nameEN\n      })\n    });\n  }\n  deleteMovie(cardId, token) {\n    return this._request(`/movies/${cardId}`, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  }\n}\nexport const apiMain = new ApiMain({\n  url: \"http://localhost:3000\"\n  //url: \"https://movies.nomoredomainsrocks.ru\",\n});","map":{"version":3,"names":["ApiMain","constructor","options","_url","url","_checkResponse","res","ok","Promise","resolve","json","reject","status","_request","path","method","data","body","JSON","stringify","fetch","headers","then","registration","authorization","getUserData","token","getUserInfo","response","localStorage","getItem","setUserInfo","name","about","getMovies","addMovie","Authorization","country","director","duration","description","year","image","trailerLink","thumbnail","formats","movieId","id","nameRU","nameEN","deleteMovie","cardId","apiMain"],"sources":["/Users/darlene/Desktop/dev/diploma/movies-explorer-frontend/frontend/src/utils/MainApi.js"],"sourcesContent":["class ApiMain {\n  constructor(options) {\n    this._url = options.url;\n  }\n\n  _checkResponse(res) {\n    if (res.ok) {\n      return Promise.resolve(res.json());\n    }\n    return Promise.reject(`Ошибка ${res.status}`);\n  }\n\n  //Регистрация и авторизация\n\n  _request(path, method, data) {\n    let body = data;\n    if (method === \"POST\" && data) {\n      body = JSON.stringify(data);\n    }\n    return fetch(this._url + path, {\n      method,\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body,\n    }).then(this._checkResponse);\n  }\n\n  registration(data) {\n    return this._request(`/signup`, \"POST\", data);\n  }\n\n  authorization(data) {\n    return this._request(`/signin`, \"POST\", data);\n  }\n\n  //Получение данных\n  getUserData(token) {\n    return this._request(\"/users/me\", {\n      headers: {\n        authorization: `Bearer ${token}`,\n      },\n    });\n  }\n\n  async getUserInfo() {\n    const response = await fetch(`${this._url}/users/me`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      },\n    });\n    return this._checkResponse(response);\n  }\n\n  //Редактирование данных пользователя\n  async setUserInfo(data) {\n    const response = await fetch(`${this._url}/users/me`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      },\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about,\n      }),\n    });\n    return this._checkResponse(response);\n  }\n\n  //\n\n  getMovies(token) {\n    return this._request(\"/movies\", {\n      headers: {\n        authorization: `Bearer ${token}`,\n      },\n    });\n  }\n\n  addMovie(data, token) {\n    return this._request(\"/movies\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n      body: JSON.stringify({\n        country: data.country,\n        director: data.director,\n        duration: data.duration,\n        description: data.description,\n        year: data.year,\n        image: `https://api.nomoreparties.co${data.image.url}`,\n        trailerLink: data.trailerLink,\n        thumbnail: `https://api.nomoreparties.co${data.image.formats.thumbnail.url}`,\n        movieId: data.id,\n        nameRU: data.nameRU,\n        nameEN: data.nameEN,\n      }),\n    });\n  }\n\n  deleteMovie(cardId, token) {\n    return this._request(`/movies/${cardId}`, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n  }\n}\n\nexport const apiMain = new ApiMain({\n  url: \"http://localhost:3000\",\n  //url: \"https://movies.nomoredomainsrocks.ru\",\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}