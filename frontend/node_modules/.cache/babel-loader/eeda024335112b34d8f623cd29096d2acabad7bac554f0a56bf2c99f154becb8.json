{"ast":null,"code":"class ApiMain {\n  constructor(options) {\n    this._url = options.url;\n  }\n  _checkResponse(res) {\n    if (res.ok) {\n      return Promise.resolve(res.json());\n    }\n    return Promise.reject(`Ошибка ${res.status}`);\n  }\n\n  //Регистрация и авторизация\n  _request(url, options) {\n    return fetch(`${this._url}${url}`, options).then(this._checkResponse);\n  }\n  registration(username, email, password) {\n    return this._request('/signup', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: username,\n        email: email,\n        password: password\n      })\n    });\n  }\n  authorization(email, password) {\n    return this._request('/signin', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: email,\n        password: password\n      })\n    });\n  }\n\n  //Получение данных\n  getUserData(token) {\n    return this._request('/users/me', {\n      headers: {\n        authorization: `Bearer ${localStorage.getItem(\"token\")}`\n      }\n    });\n  }\n  async getUserInfo() {\n    const response = await fetch(`${this._url}/users/me`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Bearer ${localStorage.getItem(\"token\")}`\n      }\n    });\n    return this._checkResponse(response);\n  }\n\n  //Редактирование данных пользователя\n  async setUserInfo(data) {\n    const response = await fetch(`${this._url}/users/me`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Bearer ${localStorage.getItem(\"token\")}`\n      },\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    });\n    return this._checkResponse(response);\n  }\n\n  //\n\n  getMovies(token) {\n    return this._request('/movies', {\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    });\n  }\n  addMovie(data, token) {\n    return this._request('/movies', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        \"Authorization\": `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        country: data.country,\n        director: data.director,\n        duration: data.duration,\n        description: data.description,\n        year: data.year,\n        image: `https://api.nomoreparties.co${data.image.url}`,\n        trailerLink: data.trailerLink,\n        thumbnail: `https://api.nomoreparties.co${data.image.formats.thumbnail.url}`,\n        movieId: data.id,\n        nameRU: data.nameRU,\n        nameEN: data.nameEN\n      })\n    });\n  }\n  deleteMovie(cardId, token) {\n    return this._request(`/movies/${cardId}`, {\n      method: 'DELETE',\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    });\n  }\n}\nexport const apiMain = new ApiMain({\n  url: \"http://localhost:3000\"\n  //url: \"https://movies.nomoredomainsrocks.ru\",\n});","map":{"version":3,"names":["ApiMain","constructor","options","_url","url","_checkResponse","res","ok","Promise","resolve","json","reject","status","_request","fetch","then","registration","username","email","password","method","headers","body","JSON","stringify","name","authorization","getUserData","token","localStorage","getItem","getUserInfo","response","setUserInfo","data","about","getMovies","addMovie","country","director","duration","description","year","image","trailerLink","thumbnail","formats","movieId","id","nameRU","nameEN","deleteMovie","cardId","apiMain"],"sources":["/Users/darlene/Desktop/dev/diploma/movies-explorer-frontend/frontend/src/utils/MainApi.js"],"sourcesContent":["class ApiMain {\n  constructor(options) {\n    this._url = options.url;\n  }\n\n  _checkResponse(res) {\n    if (res.ok) {\n      return Promise.resolve(res.json())\n    }\n    return Promise.reject(`Ошибка ${res.status}`);\n  }\n\n  //Регистрация и авторизация\n  _request(url, options) {\n    return fetch(`${this._url}${url}`, options).then(this._checkResponse);\n  }\n\n  registration(username, email, password) {\n    return this._request('/signup', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: username,\n        email: email,\n        password: password\n      })\n    })\n  }\n\n  authorization(email, password) {return this._request('/signin', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email: email,\n      password: password\n    })\n  })\n}\n\n  //Получение данных\n  getUserData(token) {\n    return this._request('/users/me', {\n      headers: {\n        authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      },\n    });\n  }\n\n  async getUserInfo() {\n    const response = await fetch(`${this._url}/users/me`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      },\n    })\n    return this._checkResponse(response)\n  }\n\n\n  //Редактирование данных пользователя\n  async setUserInfo(data) {\n    const response = await fetch(`${this._url}/users/me`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      },\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about,\n      }),\n    })\n    return this._checkResponse(response)\n  }\n\n\n\n  //\n\n  getMovies(token) {\n    return this._request('/movies', {\n      headers: {\n        \"Authorization\" : `Bearer ${token}`\n      }\n    })\n  }\n\n  addMovie(data, token) {\n    return this._request('/movies', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        \"Authorization\" : `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        country: data.country,\n        director: data.director,\n        duration: data.duration,\n        description: data.description,\n        year: data.year,\n        image: `https://api.nomoreparties.co${data.image.url}`,\n        trailerLink: data.trailerLink,\n        thumbnail: `https://api.nomoreparties.co${data.image.formats.thumbnail.url}`,\n        movieId: data.id,\n        nameRU: data.nameRU,\n        nameEN: data.nameEN\n      })\n    })\n  }\n\n  deleteMovie(cardId, token) {\n    return this._request(`/movies/${cardId}`, {\n      method: 'DELETE',\n      headers: {\n        \"Authorization\" : `Bearer ${token}`\n      }\n    })\n  }\n}\n\n\n\n\n\nexport const apiMain = new ApiMain({\n  url: \"http://localhost:3000\",\n  //url: \"https://movies.nomoredomainsrocks.ru\",\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}